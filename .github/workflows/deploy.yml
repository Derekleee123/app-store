name: Deploy Next.js App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Install dependencies
        run: npm install

      - name: Run tests with coverage
        run: npm run test -- --coverage --watchAll=false

      - name: Show coverage directory
        run: ls -R coverage # Display coverage directory to ensure files exist

      - name: Install libxml2 for xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2

      - name: Install libxml2-utils for xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Generate coverage badge
        run: npm run coverage-badge # Ensure the coverage badge is generated

      - name: Build the project
        run: npm run build

      - name: Build Docker image
        run: docker build -t derek11428/app-store:latest .

      - name: List Docker images
        run: docker images

      - name: Log in to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com

      - name: Tag Docker image for Heroku
        run: docker tag derek11428/app-store:latest registry.heroku.com/app-store-auto/web

      - name: Push Docker image to Heroku
        run: docker push registry.heroku.com/app-store-auto/web

      - name: Release the image to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku container:release web --app app-store-auto

      - name: Bump version
        run: |
          npm version patch --git-tag-version false
          VERSION=$(node -p "require('./package.json').version")
          echo "Updating version in README to $VERSION"
          sed -i "s|!\[Version\](https://img.shields.io/badge/version-[0-9.]\+-blue)|![Version](https://img.shields.io/badge/version-$VERSION-blue)|g" README.md

      - name: Display updated README for debugging
        run: cat README.md

      - name: Update README with coverage percentage
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            # Calculate test coverage from coverage-summary.json
            coverage_percent=$(jq '.total.statements.pct' coverage/coverage-summary.json)
            echo "Coverage percentage: $coverage_percent%"

            # Update coverage badge in README
            echo "Updating coverage badge in README to $coverage_percent%"
            sed -i "s|!\[Coverage\](https://img.shields.io/badge/Coverage-[0-9.]\+%25-brightgreen)|![Coverage](https://img.shields.io/badge/Coverage-$coverage_percent%25-brightgreen)|g" README.md

          else
            echo "Coverage file not found!"
          fi

      - name: Commit and push changes to README and package.json
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "github-actions"
          git add package.json README.md
          git commit -m "Bump version to $VERSION and update README with coverage" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push new tag
        run: |
          git fetch --tags
          VERSION=$(node -p "require('./package.json').version")
          git tag v$VERSION
          git push origin v$VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
